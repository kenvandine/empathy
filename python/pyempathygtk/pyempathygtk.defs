;; -*- scheme -*-
; object definitions ...
(define-object AccountChooser
  (in-module "Empathy")
  (parent "GtkComboBox")
  (c-name "EmpathyAccountChooser")
  (gtype-id "EMPATHY_TYPE_ACCOUNT_CHOOSER")
)

(define-object AvatarChooser
  (in-module "Empathy")
  (parent "GtkButton")
  (c-name "EmpathyAvatarChooser")
  (gtype-id "EMPATHY_TYPE_AVATAR_CHOOSER")
)

(define-object AvatarImage
  (in-module "Empathy")
  (parent "GtkEventBox")
  (c-name "EmpathyAvatarImage")
  (gtype-id "EMPATHY_TYPE_AVATAR_IMAGE")
)

(define-object CellRendererActivatable
  (in-module "Empathy")
  (parent "GtkCellRendererPixbuf")
  (c-name "EmpathyCellRendererActivatable")
  (gtype-id "EMPATHY_TYPE_CELL_RENDERER_ACTIVATABLE")
)

(define-object CellRendererExpander
  (in-module "Empathy")
  (parent "GtkCellRenderer")
  (c-name "EmpathyCellRendererExpander")
  (gtype-id "EMPATHY_TYPE_CELL_RENDERER_EXPANDER")
)

(define-object CellRendererText
  (in-module "Empathy")
  (parent "GtkCellRendererText")
  (c-name "EmpathyCellRendererText")
  (gtype-id "EMPATHY_TYPE_CELL_RENDERER_TEXT")
)

(define-object Chat
  (in-module "Empathy")
  (parent "GtkBin")
  (c-name "EmpathyChat")
  (gtype-id "EMPATHY_TYPE_CHAT")
)

(define-object ChatTextView
  (in-module "Empathy")
  (parent "GtkTextView")
  (c-name "EmpathyChatTextView")
  (gtype-id "EMPATHY_TYPE_CHAT_TEXT_VIEW")
)

(define-interface ChatView
  (in-module "Empathy")
  (c-name "EmpathyChatView")
  (gtype-id "EMPATHY_TYPE_CHAT_VIEW")
)

(define-object Conf
  (in-module "Empathy")
  (parent "GObject")
  (c-name "EmpathyConf")
  (gtype-id "EMPATHY_TYPE_CONF")
)

(define-object ContactListStore
  (in-module "Empathy")
  (parent "GtkTreeStore")
  (c-name "EmpathyContactListStore")
  (gtype-id "EMPATHY_TYPE_CONTACT_LIST_STORE")
)

(define-object ContactListView
  (in-module "Empathy")
  (parent "GtkTreeView")
  (c-name "EmpathyContactListView")
  (gtype-id "EMPATHY_TYPE_CONTACT_LIST_VIEW")
)

(define-object ContactSelector
  (in-module "Empathy")
  (parent "GtkComboBox")
  (c-name "EmpathyContactSelector")
  (gtype-id "EMPATHY_TYPE_CONTACT_SELECTOR")
)

(define-object GstAudioSink
  (in-module "Empathy")
  (parent "GstBin")
  (c-name "EmpathyGstAudioSink")
  (gtype-id "EMPATHY_TYPE_GST_AUDIO_SINK")
)

(define-object GstAudioSrc
  (in-module "Empathy")
  (parent "GstBin")
  (c-name "EmpathyGstAudioSrc")
  (gtype-id "EMPATHY_TYPE_GST_AUDIO_SRC")
)

(define-object GstVideoSrc
  (in-module "Empathy")
  (parent "GstBin")
  (c-name "EmpathyGstVideoSrc")
  (gtype-id "EMPATHY_TYPE_GST_VIDEO_SRC")
)

(define-object PresenceChooser
  (in-module "Empathy")
  (parent "GtkComboBoxEntry")
  (c-name "EmpathyPresenceChooser")
  (gtype-id "EMPATHY_TYPE_PRESENCE_CHOOSER")
)

(define-object ProfileChooser
  (in-module "Empathy")
  (parent "GtkComboBox")
  (c-name "EmpathyProfileChooser")
  (gtype-id "EMPATHY_TYPE_PROFILE_CHOOSER")
)

(define-object SmileyManager
  (in-module "Empathy")
  (parent "GObject")
  (c-name "EmpathySmileyManager")
  (gtype-id "EMPATHY_TYPE_SMILEY_MANAGER")
)

(define-object ThemeBoxes
  (in-module "Empathy")
  (parent "EmpathyChatTextView")
  (c-name "EmpathyThemeBoxes")
  (gtype-id "EMPATHY_TYPE_THEME_BOXES")
)

(define-object ThemeIrc
  (in-module "Empathy")
  (parent "EmpathyChatTextView")
  (c-name "EmpathyThemeIrc")
  (gtype-id "EMPATHY_TYPE_THEME_IRC")
)

(define-object ThemeManager
  (in-module "Empathy")
  (parent "GObject")
  (c-name "EmpathyThemeManager")
  (gtype-id "EMPATHY_TYPE_THEME_MANAGER")
)

(define-object VideoWidget
  (in-module "Empathy")
  (parent "GtkDrawingArea")
  (c-name "EmpathyVideoWidget")
  (gtype-id "EMPATHY_TYPE_VIDEO_WIDGET")
)

;; Enumerations and flags ...

(define-enum ContactListStoreSort
  (in-module "Empathy")
  (c-name "EmpathyContactListStoreSort")
  (gtype-id "EMPATHY_TYPE_CONTACT_LIST_STORE_SORT")
  (values
    '("state" "EMPATHY_CONTACT_LIST_STORE_SORT_STATE")
    '("name" "EMPATHY_CONTACT_LIST_STORE_SORT_NAME")
  )
)

(define-enum ContactListStoreCol
  (in-module "Empathy")
  (c-name "EmpathyContactListStoreCol")
  (gtype-id "EMPATHY_TYPE_CONTACT_LIST_STORE_COL")
  (values
    '("icon-status" "EMPATHY_CONTACT_LIST_STORE_COL_ICON_STATUS")
    '("pixbuf-avatar" "EMPATHY_CONTACT_LIST_STORE_COL_PIXBUF_AVATAR")
    '("pixbuf-avatar-visible" "EMPATHY_CONTACT_LIST_STORE_COL_PIXBUF_AVATAR_VISIBLE")
    '("name" "EMPATHY_CONTACT_LIST_STORE_COL_NAME")
    '("status" "EMPATHY_CONTACT_LIST_STORE_COL_STATUS")
    '("status-visible" "EMPATHY_CONTACT_LIST_STORE_COL_STATUS_VISIBLE")
    '("contact" "EMPATHY_CONTACT_LIST_STORE_COL_CONTACT")
    '("is-group" "EMPATHY_CONTACT_LIST_STORE_COL_IS_GROUP")
    '("is-active" "EMPATHY_CONTACT_LIST_STORE_COL_IS_ACTIVE")
    '("is-online" "EMPATHY_CONTACT_LIST_STORE_COL_IS_ONLINE")
    '("is-separator" "EMPATHY_CONTACT_LIST_STORE_COL_IS_SEPARATOR")
    '("can-audio-call" "EMPATHY_CONTACT_LIST_STORE_COL_CAN_AUDIO_CALL")
    '("can-video-call" "EMPATHY_CONTACT_LIST_STORE_COL_CAN_VIDEO_CALL")
    '("count" "EMPATHY_CONTACT_LIST_STORE_COL_COUNT")
  )
)

(define-flags ContactListFeatureFlags
  (in-module "Empathy")
  (c-name "EmpathyContactListFeatureFlags")
  (gtype-id "EMPATHY_TYPE_CONTACT_LIST_FEATURE_FLAGS")
  (values
    '("none" "EMPATHY_CONTACT_LIST_FEATURE_NONE")
    '("groups-save" "EMPATHY_CONTACT_LIST_FEATURE_GROUPS_SAVE")
    '("groups-rename" "EMPATHY_CONTACT_LIST_FEATURE_GROUPS_RENAME")
    '("groups-remove" "EMPATHY_CONTACT_LIST_FEATURE_GROUPS_REMOVE")
    '("contact-remove" "EMPATHY_CONTACT_LIST_FEATURE_CONTACT_REMOVE")
    '("contact-drop" "EMPATHY_CONTACT_LIST_FEATURE_CONTACT_DROP")
    '("contact-drag" "EMPATHY_CONTACT_LIST_FEATURE_CONTACT_DRAG")
    '("contact-tooltip" "EMPATHY_CONTACT_LIST_FEATURE_CONTACT_TOOLTIP")
    '("all" "EMPATHY_CONTACT_LIST_FEATURE_ALL")
  )
)

(define-flags ContactFeatureFlags
  (in-module "Empathy")
  (c-name "EmpathyContactFeatureFlags")
  (gtype-id "EMPATHY_TYPE_CONTACT_FEATURE_FLAGS")
  (values
    '("none" "EMPATHY_CONTACT_FEATURE_NONE")
    '("chat" "EMPATHY_CONTACT_FEATURE_CHAT")
    '("call" "EMPATHY_CONTACT_FEATURE_CALL")
    '("log" "EMPATHY_CONTACT_FEATURE_LOG")
    '("edit" "EMPATHY_CONTACT_FEATURE_EDIT")
    '("info" "EMPATHY_CONTACT_FEATURE_INFO")
    '("all" "EMPATHY_CONTACT_FEATURE_ALL")
  )
)

(define-flags ContactWidgetFlags
  (in-module "Empathy")
  (c-name "EmpathyContactWidgetFlags")
  (gtype-id "EMPATHY_TYPE_CONTACT_WIDGET_FLAGS")
  (values
    '("edit-none" "EMPATHY_CONTACT_WIDGET_EDIT_NONE")
    '("edit-alias" "EMPATHY_CONTACT_WIDGET_EDIT_ALIAS")
    '("edit-avatar" "EMPATHY_CONTACT_WIDGET_EDIT_AVATAR")
    '("edit-account" "EMPATHY_CONTACT_WIDGET_EDIT_ACCOUNT")
    '("edit-id" "EMPATHY_CONTACT_WIDGET_EDIT_ID")
    '("edit-groups" "EMPATHY_CONTACT_WIDGET_EDIT_GROUPS")
    '("for-tooltip" "EMPATHY_CONTACT_WIDGET_FOR_TOOLTIP")
    '("show-location" "EMPATHY_CONTACT_WIDGET_SHOW_LOCATION")
  )
)

(define-enum GstVideoSrcChannel
  (in-module "Empathy")
  (c-name "EmpathyGstVideoSrcChannel")
  (gtype-id "EMPATHY_TYPE_GST_VIDEO_SRC_CHANNEL")
  (values
    '("empathy-gst-video-src-channel-contrast" "EMPATHY_GST_VIDEO_SRC_CHANNEL_CONTRAST")
    '("empathy-gst-video-src-channel-brightness" "EMPATHY_GST_VIDEO_SRC_CHANNEL_BRIGHTNESS")
    '("empathy-gst-video-src-channel-gamma" "EMPATHY_GST_VIDEO_SRC_CHANNEL_GAMMA")
    '("nr-empathy-gst-video-src-channels" "NR_EMPATHY_GST_VIDEO_SRC_CHANNELS")
  )
)

(define-enum Sound
  (in-module "Empathy")
  (c-name "EmpathySound")
  (gtype-id "EMPATHY_TYPE_SOUND")
  (values
    '("empathy-sound-message-incoming" "EMPATHY_SOUND_MESSAGE_INCOMING")
    '("empathy-sound-message-outgoing" "EMPATHY_SOUND_MESSAGE_OUTGOING")
    '("empathy-sound-conversation-new" "EMPATHY_SOUND_CONVERSATION_NEW")
    '("empathy-sound-contact-connected" "EMPATHY_SOUND_CONTACT_CONNECTED")
    '("empathy-sound-contact-disconnected" "EMPATHY_SOUND_CONTACT_DISCONNECTED")
    '("empathy-sound-account-connected" "EMPATHY_SOUND_ACCOUNT_CONNECTED")
    '("empathy-sound-account-disconnected" "EMPATHY_SOUND_ACCOUNT_DISCONNECTED")
    '("empathy-sound-phone-incoming" "EMPATHY_SOUND_PHONE_INCOMING")
    '("empathy-sound-phone-outgoing" "EMPATHY_SOUND_PHONE_OUTGOING")
    '("empathy-sound-phone-hangup" "EMPATHY_SOUND_PHONE_HANGUP")
    '("last-empathy-sound" "LAST_EMPATHY_SOUND")
  )
)


;; From empathy-account-chooser.h

(define-function account_chooser_get_type
  (c-name "empathy_account_chooser_get_type")
  (return-type "GType")
)

(define-function account_chooser_new
  (c-name "empathy_account_chooser_new")
  (is-constructor-of "EmpathyAccountChooser")
  (return-type "GtkWidget*")
)

(define-method dup_account
  (of-object "EmpathyAccountChooser")
  (c-name "empathy_account_chooser_dup_account")
  (return-type "EmpathyAccount*")
)

(define-method get_connection
  (of-object "EmpathyAccountChooser")
  (c-name "empathy_account_chooser_get_connection")
  (return-type "TpConnection*")
)

(define-method set_account
  (of-object "EmpathyAccountChooser")
  (c-name "empathy_account_chooser_set_account")
  (return-type "gboolean")
  (parameters
    '("EmpathyAccount*" "account")
  )
)

(define-method get_has_all_option
  (of-object "EmpathyAccountChooser")
  (c-name "empathy_account_chooser_get_has_all_option")
  (return-type "gboolean")
)

(define-method set_has_all_option
  (of-object "EmpathyAccountChooser")
  (c-name "empathy_account_chooser_set_has_all_option")
  (return-type "none")
  (parameters
    '("gboolean" "has_all_option")
  )
)

(define-method set_filter
  (of-object "EmpathyAccountChooser")
  (c-name "empathy_account_chooser_set_filter")
  (return-type "none")
  (parameters
    '("EmpathyAccountChooserFilterFunc" "filter")
    '("gpointer" "user_data")
  )
)

(define-method chooser_filter_is_connected
  (of-object "EmpathyAccount")
  (c-name "empathy_account_chooser_filter_is_connected")
  (return-type "gboolean")
  (parameters
    '("gpointer" "user_data")
  )
)



;; From empathy-account-widget.h

(define-method widget_handle_params
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_handle_params")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "gui")
    '("const-gchar*" "first_widget")
  )
  (varargs #t)
)

(define-method widget_add_forget_button
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_add_forget_button")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "gui")
    '("const-gchar*" "button")
    '("const-gchar*" "entry")
  )
)

(define-function account_widget_set_default_focus
  (c-name "empathy_account_widget_set_default_focus")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "gui")
    '("const-gchar*" "entry")
  )
)

(define-method widget_generic_new
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_generic_new")
  (return-type "GtkWidget*")
)

(define-method widget_salut_new
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_salut_new")
  (return-type "GtkWidget*")
)

(define-method widget_msn_new
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_msn_new")
  (return-type "GtkWidget*")
)

(define-method widget_jabber_new
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_jabber_new")
  (return-type "GtkWidget*")
)

(define-method widget_icq_new
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_icq_new")
  (return-type "GtkWidget*")
)

(define-method widget_aim_new
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_aim_new")
  (return-type "GtkWidget*")
)

(define-method widget_yahoo_new
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_yahoo_new")
  (return-type "GtkWidget*")
)

(define-method widget_groupwise_new
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_groupwise_new")
  (return-type "GtkWidget*")
)



;; From empathy-account-widget-irc.h

(define-method widget_irc_new
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_irc_new")
  (return-type "GtkWidget*")
)



;; From empathy-account-widget-sip.h

(define-method widget_sip_new
  (of-object "EmpathyAccount")
  (c-name "empathy_account_widget_sip_new")
  (return-type "GtkWidget*")
)



;; From empathy-avatar-chooser.h

(define-function avatar_chooser_get_type
  (c-name "empathy_avatar_chooser_get_type")
  (return-type "GType")
)

(define-function avatar_chooser_new
  (c-name "empathy_avatar_chooser_new")
  (is-constructor-of "EmpathyAvatarChooser")
  (return-type "GtkWidget*")
)

(define-method set
  (of-object "EmpathyAvatarChooser")
  (c-name "empathy_avatar_chooser_set")
  (return-type "none")
  (parameters
    '("EmpathyAvatar*" "avatar")
  )
)

(define-method get_image_data
  (of-object "EmpathyAvatarChooser")
  (c-name "empathy_avatar_chooser_get_image_data")
  (return-type "none")
  (parameters
    '("const-gchar**" "data")
    '("gsize*" "data_size")
    '("const-gchar**" "mime_type")
  )
)



;; From empathy-avatar-image.h

(define-function avatar_image_get_type
  (c-name "empathy_avatar_image_get_type")
  (return-type "GType")
)

(define-function avatar_image_new
  (c-name "empathy_avatar_image_new")
  (is-constructor-of "EmpathyAvatarImage")
  (return-type "GtkWidget*")
)

(define-method set
  (of-object "EmpathyAvatarImage")
  (c-name "empathy_avatar_image_set")
  (return-type "none")
  (parameters
    '("EmpathyAvatar*" "avatar")
  )
)



;; From empathy-cell-renderer-activatable.h

(define-function cell_renderer_activatable_get_type
  (c-name "empathy_cell_renderer_activatable_get_type")
  (return-type "GType")
)

(define-function cell_renderer_activatable_new
  (c-name "empathy_cell_renderer_activatable_new")
  (is-constructor-of "EmpathyCellRendererActivatable")
  (return-type "GtkCellRenderer*")
)



;; From empathy-cell-renderer-expander.h

(define-function cell_renderer_expander_get_type
  (c-name "empathy_cell_renderer_expander_get_type")
  (return-type "GType")
)

(define-function cell_renderer_expander_new
  (c-name "empathy_cell_renderer_expander_new")
  (is-constructor-of "EmpathyCellRendererExpander")
  (return-type "GtkCellRenderer*")
)



;; From empathy-cell-renderer-text.h

(define-function cell_renderer_text_get_type
  (c-name "empathy_cell_renderer_text_get_type")
  (return-type "GType")
)

(define-function cell_renderer_text_new
  (c-name "empathy_cell_renderer_text_new")
  (is-constructor-of "EmpathyCellRendererText")
  (return-type "GtkCellRenderer*")
)



;; From empathy-chat.h

(define-function chat_get_type
  (c-name "empathy_chat_get_type")
  (return-type "GType")
)

(define-function chat_new
  (c-name "empathy_chat_new")
  (is-constructor-of "EmpathyChat")
  (return-type "EmpathyChat*")
  (parameters
    '("EmpathyTpChat*" "tp_chat")
  )
)

(define-method get_tp_chat
  (of-object "EmpathyChat")
  (c-name "empathy_chat_get_tp_chat")
  (return-type "EmpathyTpChat*")
)

(define-method set_tp_chat
  (of-object "EmpathyChat")
  (c-name "empathy_chat_set_tp_chat")
  (return-type "none")
  (parameters
    '("EmpathyTpChat*" "tp_chat")
  )
)

(define-method get_account
  (of-object "EmpathyChat")
  (c-name "empathy_chat_get_account")
  (return-type "EmpathyAccount*")
)

(define-method get_id
  (of-object "EmpathyChat")
  (c-name "empathy_chat_get_id")
  (return-type "const-gchar*")
)

(define-method get_name
  (of-object "EmpathyChat")
  (c-name "empathy_chat_get_name")
  (return-type "const-gchar*")
)

(define-method get_subject
  (of-object "EmpathyChat")
  (c-name "empathy_chat_get_subject")
  (return-type "const-gchar*")
)

(define-method get_remote_contact
  (of-object "EmpathyChat")
  (c-name "empathy_chat_get_remote_contact")
  (return-type "EmpathyContact*")
)

(define-method get_contact_menu
  (of-object "EmpathyChat")
  (c-name "empathy_chat_get_contact_menu")
  (return-type "GtkWidget*")
)

(define-method clear
  (of-object "EmpathyChat")
  (c-name "empathy_chat_clear")
  (return-type "none")
)

(define-method scroll_down
  (of-object "EmpathyChat")
  (c-name "empathy_chat_scroll_down")
  (return-type "none")
)

(define-method cut
  (of-object "EmpathyChat")
  (c-name "empathy_chat_cut")
  (return-type "none")
)

(define-method copy
  (of-object "EmpathyChat")
  (c-name "empathy_chat_copy")
  (return-type "none")
)

(define-method paste
  (of-object "EmpathyChat")
  (c-name "empathy_chat_paste")
  (return-type "none")
)

(define-method correct_word
  (of-object "EmpathyChat")
  (c-name "empathy_chat_correct_word")
  (return-type "none")
  (parameters
    '("GtkTextIter*" "start")
    '("GtkTextIter*" "end")
    '("const-gchar*" "new_word")
  )
)

(define-method is_room
  (of-object "EmpathyChat")
  (c-name "empathy_chat_is_room")
  (return-type "gboolean")
)

(define-method set_show_contacts
  (of-object "EmpathyChat")
  (c-name "empathy_chat_set_show_contacts")
  (return-type "none")
  (parameters
    '("gboolean" "show")
  )
)



;; From empathy-chat-text-view.h

(define-function chat_text_view_get_type
  (c-name "empathy_chat_text_view_get_type")
  (return-type "GType")
)

(define-method get_last_contact
  (of-object "EmpathyChatTextView")
  (c-name "empathy_chat_text_view_get_last_contact")
  (return-type "EmpathyContact*")
)

(define-method set_only_if_date
  (of-object "EmpathyChatTextView")
  (c-name "empathy_chat_text_view_set_only_if_date")
  (return-type "none")
  (parameters
    '("gboolean" "only_if_date")
  )
)

(define-method append_body
  (of-object "EmpathyChatTextView")
  (c-name "empathy_chat_text_view_append_body")
  (return-type "none")
  (parameters
    '("const-gchar*" "body")
    '("const-gchar*" "tag")
  )
)

(define-method append_spacing
  (of-object "EmpathyChatTextView")
  (c-name "empathy_chat_text_view_append_spacing")
  (return-type "none")
)

(define-method tag_set
  (of-object "EmpathyChatTextView")
  (c-name "empathy_chat_text_view_tag_set")
  (return-type "GtkTextTag*")
  (parameters
    '("const-gchar*" "tag_name")
    '("const-gchar*" "first_property_name")
  )
  (varargs #t)
)



;; From empathy-chat-view.h

(define-function chat_view_get_type
  (c-name "empathy_chat_view_get_type")
  (return-type "GType")
)

(define-method append_message
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_append_message")
  (return-type "none")
  (parameters
    '("EmpathyMessage*" "msg")
  )
)

(define-method append_event
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_append_event")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method scroll
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_scroll")
  (return-type "none")
  (parameters
    '("gboolean" "allow_scrolling")
  )
)

(define-method scroll_down
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_scroll_down")
  (return-type "none")
)

(define-method get_has_selection
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_get_has_selection")
  (return-type "gboolean")
)

(define-method clear
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_clear")
  (return-type "none")
)

(define-method find_previous
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_find_previous")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "search_criteria")
    '("gboolean" "new_search")
  )
)

(define-method find_next
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_find_next")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "search_criteria")
    '("gboolean" "new_search")
  )
)

(define-method find_abilities
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_find_abilities")
  (return-type "none")
  (parameters
    '("const-gchar*" "search_criteria")
    '("gboolean*" "can_do_previous")
    '("gboolean*" "can_do_next")
  )
)

(define-method highlight
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_highlight")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method copy_clipboard
  (of-object "EmpathyChatView")
  (c-name "empathy_chat_view_copy_clipboard")
  (return-type "none")
)



;; From empathy-conf.h

(define-function conf_get_type
  (c-name "empathy_conf_get_type")
  (return-type "GType")
)

(define-function conf_get
  (c-name "empathy_conf_get")
  (return-type "EmpathyConf*")
)

(define-function conf_shutdown
  (c-name "empathy_conf_shutdown")
  (return-type "none")
)

(define-method notify_add
  (of-object "EmpathyConf")
  (c-name "empathy_conf_notify_add")
  (return-type "guint")
  (parameters
    '("const-gchar*" "key")
    '("EmpathyConfNotifyFunc" "func")
    '("gpointer" "data")
  )
)

(define-method notify_remove
  (of-object "EmpathyConf")
  (c-name "empathy_conf_notify_remove")
  (return-type "gboolean")
  (parameters
    '("guint" "id")
  )
)

(define-method set_int
  (of-object "EmpathyConf")
  (c-name "empathy_conf_set_int")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("gint" "value")
  )
)

(define-method get_int
  (of-object "EmpathyConf")
  (c-name "empathy_conf_get_int")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("gint*" "value")
  )
)

(define-method set_bool
  (of-object "EmpathyConf")
  (c-name "empathy_conf_set_bool")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("gboolean" "value")
  )
)

(define-method get_bool
  (of-object "EmpathyConf")
  (c-name "empathy_conf_get_bool")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("gboolean*" "value")
  )
)

(define-method set_string
  (of-object "EmpathyConf")
  (c-name "empathy_conf_set_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "value")
  )
)

(define-method get_string
  (of-object "EmpathyConf")
  (c-name "empathy_conf_get_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("gchar**" "value")
  )
)

(define-method set_string_list
  (of-object "EmpathyConf")
  (c-name "empathy_conf_set_string_list")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("GSList*" "value")
  )
)

(define-method get_string_list
  (of-object "EmpathyConf")
  (c-name "empathy_conf_get_string_list")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "key")
    '("GSList**" "value")
  )
)



;; From empathy-contact-dialogs.h

(define-function subscription_dialog_show
  (c-name "empathy_subscription_dialog_show")
  (return-type "none")
  (parameters
    '("EmpathyContact*" "contact")
    '("GtkWindow*" "parent")
  )
)

(define-method information_dialog_show
  (of-object "EmpathyContact")
  (c-name "empathy_contact_information_dialog_show")
  (return-type "none")
  (parameters
    '("GtkWindow*" "parent")
  )
)

(define-method edit_dialog_show
  (of-object "EmpathyContact")
  (c-name "empathy_contact_edit_dialog_show")
  (return-type "none")
  (parameters
    '("GtkWindow*" "parent")
  )
)

(define-function contact_personal_dialog_show
  (c-name "empathy_contact_personal_dialog_show")
  (return-type "none")
  (parameters
    '("GtkWindow*" "parent")
  )
)

(define-function new_contact_dialog_show
  (c-name "empathy_new_contact_dialog_show")
  (return-type "none")
  (parameters
    '("GtkWindow*" "parent")
  )
)



;; From empathy-contact-list-store.h

(define-function contact_list_store_get_type
  (c-name "empathy_contact_list_store_get_type")
  (return-type "GType")
)

(define-function empathy_contact_list_store_new
  (is-constructor-of "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_new")
  (return-type "EmpathyContactListStore*")
  (parameters
    '("EmpathyContactList*" "list_iface")
  )
)

(define-method get_list_iface
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_get_list_iface")
  (return-type "EmpathyContactList*")
)

(define-method get_show_offline
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_get_show_offline")
  (return-type "gboolean")
)

(define-method set_show_offline
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_set_show_offline")
  (return-type "none")
  (parameters
    '("gboolean" "show_offline")
  )
)

(define-method get_show_avatars
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_get_show_avatars")
  (return-type "gboolean")
)

(define-method set_show_avatars
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_set_show_avatars")
  (return-type "none")
  (parameters
    '("gboolean" "show_avatars")
  )
)

(define-method get_show_groups
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_get_show_groups")
  (return-type "gboolean")
)

(define-method set_show_groups
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_set_show_groups")
  (return-type "none")
  (parameters
    '("gboolean" "show_groups")
  )
)

(define-method get_is_compact
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_get_is_compact")
  (return-type "gboolean")
)

(define-method set_is_compact
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_set_is_compact")
  (return-type "none")
  (parameters
    '("gboolean" "is_compact")
  )
)

(define-method get_sort_criterium
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_get_sort_criterium")
  (return-type "EmpathyContactListStoreSort")
)

(define-method set_sort_criterium
  (of-object "EmpathyContactListStore")
  (c-name "empathy_contact_list_store_set_sort_criterium")
  (return-type "none")
  (parameters
    '("EmpathyContactListStoreSort" "sort_criterium")
  )
)

(define-function contact_list_store_row_separator_func
  (c-name "empathy_contact_list_store_row_separator_func")
  (return-type "gboolean")
  (parameters
    '("GtkTreeModel*" "model")
    '("GtkTreeIter*" "iter")
    '("gpointer" "data")
  )
)

(define-function contact_list_store_get_parent_group
  (c-name "empathy_contact_list_store_get_parent_group")
  (return-type "gchar*")
  (parameters
    '("GtkTreeModel*" "model")
    '("GtkTreePath*" "path")
    '("gboolean*" "path_is_group")
  )
)

(define-function contact_list_store_search_equal_func
  (c-name "empathy_contact_list_store_search_equal_func")
  (return-type "gboolean")
  (parameters
    '("GtkTreeModel*" "model")
    '("gint" "column")
    '("const-gchar*" "key")
    '("GtkTreeIter*" "iter")
    '("gpointer" "search_data")
  )
)



;; From empathy-contact-list-view.h

(define-function contact_list_view_get_type
  (c-name "empathy_contact_list_view_get_type")
  (return-type "GType")
)

(define-function contact_list_view_new
  (c-name "empathy_contact_list_view_new")
  (is-constructor-of "EmpathyContactListView")
  (return-type "EmpathyContactListView*")
  (parameters
    '("EmpathyContactListStore*" "store")
    '("EmpathyContactListFeatureFlags" "list_features")
    '("EmpathyContactFeatureFlags" "contact_features")
  )
)

(define-method dup_selected
  (of-object "EmpathyContactListView")
  (c-name "empathy_contact_list_view_dup_selected")
  (return-type "EmpathyContact*")
)

(define-method get_selected_group
  (of-object "EmpathyContactListView")
  (c-name "empathy_contact_list_view_get_selected_group")
  (return-type "gchar*")
)

(define-method get_contact_menu
  (of-object "EmpathyContactListView")
  (c-name "empathy_contact_list_view_get_contact_menu")
  (return-type "GtkWidget*")
)

(define-method get_group_menu
  (of-object "EmpathyContactListView")
  (c-name "empathy_contact_list_view_get_group_menu")
  (return-type "GtkWidget*")
)



;; From empathy-contact-menu.h

(define-method menu_new
  (of-object "EmpathyContact")
  (c-name "empathy_contact_menu_new")
  (return-type "GtkWidget*")
  (parameters
    '("EmpathyContactFeatureFlags" "features")
  )
)

(define-method chat_menu_item_new
  (of-object "EmpathyContact")
  (c-name "empathy_contact_chat_menu_item_new")
  (return-type "GtkWidget*")
)

(define-method audio_call_menu_item_new
  (of-object "EmpathyContact")
  (c-name "empathy_contact_audio_call_menu_item_new")
  (return-type "GtkWidget*")
)

(define-method video_call_menu_item_new
  (of-object "EmpathyContact")
  (c-name "empathy_contact_video_call_menu_item_new")
  (return-type "GtkWidget*")
)

(define-method log_menu_item_new
  (of-object "EmpathyContact")
  (c-name "empathy_contact_log_menu_item_new")
  (return-type "GtkWidget*")
)

(define-method info_menu_item_new
  (of-object "EmpathyContact")
  (c-name "empathy_contact_info_menu_item_new")
  (return-type "GtkWidget*")
)

(define-method edit_menu_item_new
  (of-object "EmpathyContact")
  (c-name "empathy_contact_edit_menu_item_new")
  (return-type "GtkWidget*")
)

(define-method invite_menu_item_new
  (of-object "EmpathyContact")
  (c-name "empathy_contact_invite_menu_item_new")
  (return-type "GtkWidget*")
)

(define-method file_transfer_menu_item_new
  (of-object "EmpathyContact")
  (c-name "empathy_contact_file_transfer_menu_item_new")
  (return-type "GtkWidget*")
)



;; From empathy-contact-selector.h

(define-function contact_selector_get_type
  (c-name "empathy_contact_selector_get_type")
  (return-type "GType")
)

(define-function contact_selector_new
  (c-name "empathy_contact_selector_new")
  (is-constructor-of "EmpathyContactSelector")
  (return-type "GtkWidget*")
  (parameters
    '("EmpathyContactList*" "contact_list")
  )
)

(define-method dup_selected
  (of-object "EmpathyContactSelector")
  (c-name "empathy_contact_selector_dup_selected")
  (return-type "EmpathyContact*")
)

(define-method set_visible
  (of-object "EmpathyContactSelector")
  (c-name "empathy_contact_selector_set_visible")
  (return-type "none")
  (parameters
    '("EmpathyContactSelectorFilterFunc" "func")
    '("gpointer" "user_data")
  )
)



;; From empathy-contact-widget.h

(define-method widget_new
  (of-object "EmpathyContact")
  (c-name "empathy_contact_widget_new")
  (return-type "GtkWidget*")
  (parameters
    '("EmpathyContactWidgetFlags" "flags")
  )
)

(define-function contact_widget_get_contact
  (c-name "empathy_contact_widget_get_contact")
  (return-type "EmpathyContact*")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-function contact_widget_set_contact
  (c-name "empathy_contact_widget_set_contact")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("EmpathyContact*" "contact")
  )
)

(define-function contact_widget_set_account_filter
  (c-name "empathy_contact_widget_set_account_filter")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("EmpathyAccountChooserFilterFunc" "filter")
    '("gpointer" "user_data")
  )
)



;; From empathy-geometry.h

(define-function geometry_save
  (c-name "empathy_geometry_save")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "x")
    '("gint" "y")
    '("gint" "w")
    '("gint" "h")
  )
)

(define-function geometry_load
  (c-name "empathy_geometry_load")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "w")
    '("gint*" "h")
  )
)



;; From empathy-audio-sink.h

(define-function audio_sink_get_type
  (c-name "empathy_audio_sink_get_type")
  (return-type "GType")
)

(define-function audio_sink_new
  (c-name "empathy_audio_sink_new")
  (is-constructor-of "EmpathyAudioSink")
  (return-type "GstElement*")
)

(define-function audio_sink_set_volume
  (c-name "empathy_audio_sink_set_volume")
  (return-type "none")
  (parameters
    '("EmpathyGstAudioSink*" "sink")
    '("gdouble" "volume")
  )
)

(define-function audio_sink_get_volume
  (c-name "empathy_audio_sink_get_volume")
  (return-type "gdouble")
  (parameters
    '("EmpathyGstAudioSink*" "sink")
  )
)



;; From empathy-audio-src.h

(define-function audio_src_get_type
  (c-name "empathy_audio_src_get_type")
  (return-type "GType")
)

(define-function audio_src_new
  (c-name "empathy_audio_src_new")
  (is-constructor-of "EmpathyAudioSrc")
  (return-type "GstElement*")
)

(define-function audio_src_set_volume
  (c-name "empathy_audio_src_set_volume")
  (return-type "none")
  (parameters
    '("EmpathyGstAudioSrc*" "src")
    '("gdouble" "volume")
  )
)

(define-function audio_src_get_volume
  (c-name "empathy_audio_src_get_volume")
  (return-type "gdouble")
  (parameters
    '("EmpathyGstAudioSrc*" "src")
  )
)



;; From empathy-video-src.h

(define-function video_src_get_type
  (c-name "empathy_video_src_get_type")
  (return-type "GType")
)

(define-function video_src_new
  (c-name "empathy_video_src_new")
  (is-constructor-of "EmpathyVideoSrc")
  (return-type "GstElement*")
)

(define-function video_src_get_supported_channels
  (c-name "empathy_video_src_get_supported_channels")
  (return-type "guint")
  (parameters
    '("GstElement*" "src")
  )
)

(define-function video_src_set_channel
  (c-name "empathy_video_src_set_channel")
  (return-type "none")
  (parameters
    '("GstElement*" "src")
    '("EmpathyGstVideoSrcChannel" "channel")
    '("guint" "percent")
  )
)

(define-function video_src_get_channel
  (c-name "empathy_video_src_get_channel")
  (return-type "guint")
  (parameters
    '("GstElement*" "src")
    '("EmpathyGstVideoSrcChannel" "channel")
  )
)



;; From empathy-video-widget.h

(define-function video_widget_get_type
  (c-name "empathy_video_widget_get_type")
  (return-type "GType")
)

(define-function video_widget_new
  (c-name "empathy_video_widget_new")
  (is-constructor-of "EmpathyVideoWidget")
  (return-type "GtkWidget*")
  (parameters
    '("GstBus*" "bus")
  )
)

(define-function video_widget_new_with_size
  (c-name "empathy_video_widget_new_with_size")
  (return-type "GtkWidget*")
  (parameters
    '("GstBus*" "bus")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method get_element
  (of-object "EmpathyVideoWidget")
  (c-name "empathy_video_widget_get_element")
  (return-type "GstElement*")
)

(define-method get_sink
  (of-object "EmpathyVideoWidget")
  (c-name "empathy_video_widget_get_sink")
  (return-type "GstPad*")
)



;; From empathy-images.h



;; From empathy-irc-network-dialog.h

(define-method dialog_show
  (of-object "EmpathyIrcNetwork")
  (c-name "empathy_irc_network_dialog_show")
  (return-type "GtkWidget*")
  (parameters
    '("GtkWidget*" "parent")
  )
)



;; From empathy-log-window.h

(define-function log_window_show
  (c-name "empathy_log_window_show")
  (return-type "GtkWidget*")
  (parameters
    '("EmpathyAccount*" "account")
    '("const-gchar*" "chat_id")
    '("gboolean" "chatroom")
    '("GtkWindow*" "parent")
  )
)



;; From empathy-new-message-dialog.h

(define-function new_message_dialog_show
  (c-name "empathy_new_message_dialog_show")
  (return-type "GtkWidget*")
  (parameters
    '("GtkWindow*" "parent")
  )
)



;; From empathy-presence-chooser.h

(define-function presence_chooser_get_type
  (c-name "empathy_presence_chooser_get_type")
  (return-type "GType")
)

(define-function presence_chooser_new
  (c-name "empathy_presence_chooser_new")
  (is-constructor-of "EmpathyPresenceChooser")
  (return-type "GtkWidget*")
)

(define-function presence_chooser_create_menu
  (c-name "empathy_presence_chooser_create_menu")
  (return-type "GtkWidget*")
)



;; From empathy-profile-chooser.h

(define-function profile_chooser_get_type
  (c-name "empathy_profile_chooser_get_type")
  (return-type "GType")
)

(define-function profile_chooser_new
  (c-name "empathy_profile_chooser_new")
  (is-constructor-of "EmpathyProfileChooser")
  (return-type "GtkWidget*")
)

(define-method dup_selected
  (of-object "EmpathyProfileChooser")
  (c-name "empathy_profile_chooser_dup_selected")
  (return-type "McProfile*")
)

(define-method n_profiles
  (of-object "EmpathyProfileChooser")
  (c-name "empathy_profile_chooser_n_profiles")
  (return-type "gint")
)



;; From empathy-smiley-manager.h

(define-function smiley_manager_get_type
  (c-name "empathy_smiley_manager_get_type")
  (return-type "GType")
)

(define-function smiley_manager_dup_singleton
  (c-name "empathy_smiley_manager_dup_singleton")
  (return-type "EmpathySmileyManager*")
)

(define-method load
  (of-object "EmpathySmileyManager")
  (c-name "empathy_smiley_manager_load")
  (return-type "none")
)

(define-method add
  (of-object "EmpathySmileyManager")
  (c-name "empathy_smiley_manager_add")
  (return-type "none")
  (parameters
    '("const-gchar*" "icon_name")
    '("const-gchar*" "first_str")
  )
  (varargs #t)
)

(define-method get_all
  (of-object "EmpathySmileyManager")
  (c-name "empathy_smiley_manager_get_all")
  (return-type "GSList*")
)

(define-method parse
  (of-object "EmpathySmileyManager")
  (c-name "empathy_smiley_manager_parse")
  (return-type "GSList*")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-function smiley_menu_new
  (c-name "empathy_smiley_menu_new")
  (is-constructor-of "EmpathySmileyMenu")
  (return-type "GtkWidget*")
  (parameters
    '("EmpathySmileyManager*" "manager")
    '("EmpathySmileyMenuFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method free
  (of-object "EmpathySmiley")
  (c-name "empathy_smiley_free")
  (return-type "none")
)



;; From empathy-spell.h

(define-function spell_supported
  (c-name "empathy_spell_supported")
  (return-type "gboolean")
)

(define-function spell_get_language_name
  (c-name "empathy_spell_get_language_name")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "code")
  )
)

(define-function spell_get_language_codes
  (c-name "empathy_spell_get_language_codes")
  (return-type "GList*")
)

(define-function spell_free_language_codes
  (c-name "empathy_spell_free_language_codes")
  (return-type "none")
  (parameters
    '("GList*" "codes")
  )
)

(define-function spell_check
  (c-name "empathy_spell_check")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "word")
  )
)

(define-function spell_get_suggestions
  (c-name "empathy_spell_get_suggestions")
  (return-type "GList*")
  (parameters
    '("const-gchar*" "word")
  )
)

(define-function spell_free_suggestions
  (c-name "empathy_spell_free_suggestions")
  (return-type "none")
  (parameters
    '("GList*" "suggestions")
  )
)



;; From empathy-theme-boxes.h

(define-function theme_boxes_get_type
  (c-name "empathy_theme_boxes_get_type")
  (return-type "GType")
)

(define-function theme_boxes_new
  (c-name "empathy_theme_boxes_new")
  (is-constructor-of "EmpathyThemeBoxes")
  (return-type "EmpathyThemeBoxes*")
)



;; From empathy-theme-irc.h

(define-function theme_irc_get_type
  (c-name "empathy_theme_irc_get_type")
  (return-type "GType")
)

(define-function theme_irc_new
  (c-name "empathy_theme_irc_new")
  (is-constructor-of "EmpathyThemeIrc")
  (return-type "EmpathyThemeIrc*")
)



;; From empathy-theme-manager.h

(define-function theme_manager_get_type
  (c-name "empathy_theme_manager_get_type")
  (return-type "GType")
)

(define-function theme_manager_get
  (c-name "empathy_theme_manager_get")
  (return-type "EmpathyThemeManager*")
)

(define-function theme_manager_get_themes
  (c-name "empathy_theme_manager_get_themes")
  (return-type "const-gchar**")
)

(define-method create_view
  (of-object "EmpathyThemeManager")
  (c-name "empathy_theme_manager_create_view")
  (return-type "EmpathyChatView*")
)



;; From empathy-ui-utils.h

(define-function gtk_init
  (c-name "empathy_gtk_init")
  (return-type "none")
)

(define-function uri_regex_dup_singleton
  (c-name "empathy_uri_regex_dup_singleton")
  (return-type "GRegex*")
)

(define-function builder_get_file
  (c-name "empathy_builder_get_file")
  (return-type "GtkBuilder*")
  (parameters
    '("const-gchar*" "filename")
    '("const-gchar*" "first_object")
  )
  (varargs #t)
)

(define-function builder_connect
  (c-name "empathy_builder_connect")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "gui")
    '("gpointer" "user_data")
    '("gchar*" "first_object")
  )
  (varargs #t)
)

(define-function builder_unref_and_keep_widget
  (c-name "empathy_builder_unref_and_keep_widget")
  (return-type "GtkWidget*")
  (parameters
    '("GtkBuilder*" "gui")
    '("GtkWidget*" "root")
  )
)

(define-function icon_name_from_account
  (c-name "empathy_icon_name_from_account")
  (return-type "const-gchar*")
  (parameters
    '("EmpathyAccount*" "account")
  )
)

(define-function icon_name_for_presence
  (c-name "empathy_icon_name_for_presence")
  (return-type "const-gchar*")
  (parameters
    '("TpConnectionPresenceType" "presence")
  )
)

(define-function icon_name_for_contact
  (c-name "empathy_icon_name_for_contact")
  (return-type "const-gchar*")
  (parameters
    '("EmpathyContact*" "contact")
  )
)

(define-function pixbuf_from_data
  (c-name "empathy_pixbuf_from_data")
  (return-type "GdkPixbuf*")
  (parameters
    '("gchar*" "data")
    '("gsize" "data_size")
  )
)

(define-function pixbuf_from_data_and_mime
  (c-name "empathy_pixbuf_from_data_and_mime")
  (return-type "GdkPixbuf*")
  (parameters
    '("gchar*" "data")
    '("gsize" "data_size")
    '("gchar**" "mime_type")
  )
)

(define-function pixbuf_from_avatar_scaled
  (c-name "empathy_pixbuf_from_avatar_scaled")
  (return-type "GdkPixbuf*")
  (parameters
    '("EmpathyAvatar*" "avatar")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-function pixbuf_avatar_from_contact_scaled
  (c-name "empathy_pixbuf_avatar_from_contact_scaled")
  (return-type "GdkPixbuf*")
  (parameters
    '("EmpathyContact*" "contact")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-function pixbuf_scale_down_if_necessary
  (c-name "empathy_pixbuf_scale_down_if_necessary")
  (return-type "GdkPixbuf*")
  (parameters
    '("GdkPixbuf*" "pixbuf")
    '("gint" "max_size")
  )
)

(define-function pixbuf_from_icon_name
  (c-name "empathy_pixbuf_from_icon_name")
  (return-type "GdkPixbuf*")
  (parameters
    '("const-gchar*" "icon_name")
    '("GtkIconSize" "icon_size")
  )
)

(define-function pixbuf_from_icon_name_sized
  (c-name "empathy_pixbuf_from_icon_name_sized")
  (return-type "GdkPixbuf*")
  (parameters
    '("const-gchar*" "icon_name")
    '("gint" "size")
  )
)

(define-function filename_from_icon_name
  (c-name "empathy_filename_from_icon_name")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "icon_name")
    '("GtkIconSize" "icon_size")
  )
)

(define-function text_iter_forward_search
  (c-name "empathy_text_iter_forward_search")
  (return-type "gboolean")
  (parameters
    '("const-GtkTextIter*" "iter")
    '("const-gchar*" "str")
    '("GtkTextIter*" "match_start")
    '("GtkTextIter*" "match_end")
    '("const-GtkTextIter*" "limit")
  )
)

(define-function text_iter_backward_search
  (c-name "empathy_text_iter_backward_search")
  (return-type "gboolean")
  (parameters
    '("const-GtkTextIter*" "iter")
    '("const-gchar*" "str")
    '("GtkTextIter*" "match_start")
    '("GtkTextIter*" "match_end")
    '("const-GtkTextIter*" "limit")
  )
)

(define-function window_get_is_visible
  (c-name "empathy_window_get_is_visible")
  (return-type "gboolean")
  (parameters
    '("GtkWindow*" "window")
  )
)

(define-function window_present
  (c-name "empathy_window_present")
  (return-type "none")
  (parameters
    '("GtkWindow*" "window")
    '("gboolean" "steal_focus")
  )
)

(define-function window_iconify
  (c-name "empathy_window_iconify")
  (return-type "none")
  (parameters
    '("GtkWindow*" "window")
    '("GtkStatusIcon*" "status_icon")
  )
)

(define-function get_toplevel_window
  (c-name "empathy_get_toplevel_window")
  (return-type "GtkWindow*")
  (parameters
    '("GtkWidget*" "widget")
  )
)

(define-function url_show
  (c-name "empathy_url_show")
  (return-type "none")
  (parameters
    '("GtkWidget*" "parent")
    '("const-char*" "url")
  )
)

(define-function toggle_button_set_state_quietly
  (c-name "empathy_toggle_button_set_state_quietly")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("GCallback" "callback")
    '("gpointer" "user_data")
    '("gboolean" "active")
  )
)

(define-function link_button_new
  (c-name "empathy_link_button_new")
  (is-constructor-of "EmpathyLinkButton")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "url")
    '("const-gchar*" "title")
  )
)

(define-function send_file_with_file_chooser
  (c-name "empathy_send_file_with_file_chooser")
  (return-type "none")
  (parameters
    '("EmpathyContact*" "contact")
  )
)

(define-function receive_file_with_file_chooser
  (c-name "empathy_receive_file_with_file_chooser")
  (return-type "none")
  (parameters
    '("EmpathyFTHandler*" "handler")
  )
)

(define-function sound_play
  (c-name "empathy_sound_play")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("EmpathySound" "sound_id")
  )
)

(define-function sound_play_full
  (c-name "empathy_sound_play_full")
  (return-type "gboolean")
  (parameters
    '("GtkWidget*" "widget")
    '("EmpathySound" "sound_id")
    '("ca_finish_callback_t" "callback")
    '("gpointer" "user_data")
  )
)

(define-method stop
  (of-object "EmpathySound")
  (c-name "empathy_sound_stop")
  (return-type "none")
)


